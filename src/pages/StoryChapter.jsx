import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';

// Mock story data
const storyChapters = [
  {
    id: 1,
    title: '–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ',
    panels: [
      {
        image: 'üåÜ',
        text: '–≠–º–º–∞ —Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —É—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏, –≥–¥–µ —Å–∫–æ—Ä–æ –≤—ã—Ä–∞—Å—Ç–µ—Ç –µ—ë –≠–Ω–µ—Ä–≥–æ–ì–æ—Ä–æ–¥. "–≠—Ç–æ –º–æ–π —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ", - –ø–æ–¥—É–º–∞–ª–∞ –æ–Ω–∞.',
      },
      {
        image: 'üè†',
        text: '–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü –Ω–∞ —É—á–∞—Å—Ç–∫–µ —É–∂–µ —Å—Ç–æ—è–ª –¥–æ–º. –≠–º–º–∞ –≥–æ—Ä–¥–∏–ª–∞—Å—å —Å–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –∑–¥–∞–Ω–∏–µ–º, –Ω–æ –ø–æ–Ω–∏–º–∞–ª–∞ - –≥–æ—Ä–æ–¥—É –Ω—É–∂–Ω–∞ –∑–∞—â–∏—Ç–∞.',
      },
      {
        image: 'üåßÔ∏è',
        text: '–í–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞–ª–µ—Ç–µ–ª–∞ –≥—Ä–æ–∑–∞. "–ß—Ç–æ, –µ—Å–ª–∏ –º–æ–ª–Ω–∏—è —É–¥–∞—Ä–∏—Ç –≤ –¥–æ–º? –û–Ω –≤–µ–¥—å –Ω–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω..." - —Å —Ç—Ä–µ–≤–æ–≥–æ–π –ø–æ–¥—É–º–∞–ª–∞ –≠–º–º–∞.',
      },
      {
        image: 'üì±',
        text: '–û–Ω–∞ –±—ã—Å—Ç—Ä–æ –æ—Ç–∫—Ä—ã–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞–ª–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –¥–ª—è –¥–æ–º–∞. "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ", - —É–ª—ã–±–Ω—É–ª–∞—Å—å –æ–Ω–∞.',
      }
    ],
    choices: [
      { 
        text: '–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–∑–∞—â–∏—Ç—É',
        outcome: '–≠–º–º–∞ —Ä–µ—à–∏–ª–∞ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–µ–º–∏—É–º-–ø–æ–ª–∏—Å –∑–∞—â–∏—Ç–∏–ª –¥–æ–º –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç —Å—Ç–∏—Ö–∏–π–Ω—ã—Ö –±–µ–¥—Å—Ç–≤–∏–π, –Ω–æ –∏ –æ—Ç –∫—Ä–∞–∂–∏.',
        reward: { type: 'tokens', amount: 15 }
      },
      { 
        text: '–û–±–æ–π—Ç–∏—Å—å –±–∞–∑–æ–≤–æ–π –∑–∞—â–∏—Ç–æ–π',
        outcome: '–≠–º–º–∞ —Ä–µ—à–∏–ª–∞ –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ. –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –∑–∞–¥–∞—á–µ–π, –Ω–æ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –≤ –¥–æ–º –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤–æ—Ä—ã...',
        reward: { type: 'tokens', amount: 10 }
      },
    ],
    building: 'house',
    policy: 'home-basic',
    lifehack: '–ü–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞—â–∏—â–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–∂–∞—Ä–∞ –∏ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è, –Ω–æ –∏ –æ—Ç –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Ä–∏—Å–∫–æ–≤. –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≤–∞—à—É —Å—Ç—Ä–∞—Ö–æ–≤–∫—É!'
  },
  {
    id: 2,
    title: '–î–æ—Ä–æ–∂–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
    panels: [
      {
        image: 'üöó',
        text: '–ì–æ—Ä–æ–¥ —Ä–æ—Å, –∏ –≠–º–º–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å. "–°—Ç–æ–ª—å–∫–æ –¥–µ–ª, –±–µ–∑ –º–∞—à–∏–Ω—ã –Ω–µ —É—Å–ø–µ—Ç—å", - –¥—É–º–∞–ª–∞ –æ–Ω–∞, –≤—ã–±–∏—Ä–∞—è –º–æ–¥–µ–ª—å.',
      },
      {
        image: 'üõí',
        text: '–í—ã–±—Ä–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –≠–º–º–∞ –∑–∞–¥—É–º–∞–ª–∞—Å—å –æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ. "–û–°–ê–ì–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–æ–≥–æ?"',
      },
      {
        image: 'üå®Ô∏è',
        text: '–ü–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞–¥–≤–∏–≥–∞–ª—Å—è —Å–∏–ª—å–Ω—ã–π –≥—Ä–∞–¥. "–ú–∞—à–∏–Ω—É —Ç–æ–ª—å–∫–æ –∫—É–ø–∏–ª–∞, –∞ –æ–Ω–∞ —É–∂–µ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π", - –±–µ—Å–ø–æ–∫–æ–∏–ª–∞—Å—å –≠–º–º–∞.',
      },
      {
        image: 'üìä',
        text: '–û–Ω–∞ —Å—Ä–∞–≤–Ω–∏–ª–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∏ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –ö–ê–°–ö–û –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è.',
      }
    ],
    choices: [
      { 
        text: '–û—Ñ–æ—Ä–º–∏—Ç—å –ö–ê–°–ö–û',
        outcome: '–†–µ—à–µ–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –≤–µ—Ä–Ω—ã–º! –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –Ω–∞ –≥–æ—Ä–æ–¥ –æ–±—Ä—É—à–∏–ª—Å—è —Å–∏–ª—å–Ω–µ–π—à–∏–π –≥—Ä–∞–¥, –Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≠–º–º—ã –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–º–µ—â–µ–Ω —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π.',
        reward: { type: 'tokens', amount: 20 }
      },
      { 
        text: '–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è –û–°–ê–ì–û',
        outcome: '–≠–º–º–∞ —Ä–µ—à–∏–ª–∞ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å... –∏ –ø–æ–∂–∞–ª–µ–ª–∞. –ì—Ä–∞–¥ –Ω–∞–Ω–µ—Å —Å–µ—Ä—å–µ–∑–Ω—ã–π —É—â–µ—Ä–± –º–∞—à–∏–Ω–µ, –∞ –û–°–ê–ì–û –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è.',
        reward: { type: 'tokens', amount: 5 }
      },
    ],
    building: 'car',
    policy: 'car-kasko',
    lifehack: '–û–°–ê–ì–û –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É—â–µ—Ä–±, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—á–∏–Ω–∏–ª–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü. –î–ª—è –∑–∞—â–∏—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω—É–∂–Ω–æ –ö–ê–°–ö–û!'
  },
  {
    id: 3,
    title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –¥—É—Ö',
    panels: [
      {
        image: 'üèãÔ∏è',
        text: '–≠–Ω–µ—Ä–≥–æ–ì–æ—Ä–æ–¥ —Ä–∞–∑–≤–∏–≤–∞–ª—Å—è, –∏ –≠–º–º–∞ —Ä–µ—à–∏–ª–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä. "–ñ–∏—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞", - —Ä–µ—à–∏–ª–∞ –æ–Ω–∞.',
      },
      {
        image: 'üë∑',
        text: '–ö–æ–≥–¥–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, –≠–º–º–∞ –ø–æ–¥—É–º–∞–ª–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "–í —Å–ø–æ—Ä—Ç–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Ä–∏—Å–∫ —Ç—Ä–∞–≤–º. –ù—É–∂–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞".',
      },
      {
        image: 'üìã',
        text: '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –µ–π –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –æ—Ç –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.',
      },
      {
        image: 'ü§î',
        text: '"–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç—Ä–∞–≤–º—É –∏ –ø–æ–¥–∞—Å—Ç –≤ —Å—É–¥, —ç—Ç–æ –º–æ–∂–µ—Ç —Ä–∞–∑–æ—Ä–∏—Ç—å —Ü–µ–Ω—Ç—Ä", - —Ä–∞–∑–º—ã—à–ª—è–ª–∞ –≠–º–º–∞, –∏–∑—É—á–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
      }
    ],
    choices: [
      { 
        text: '–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É',
        outcome: '–ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫—É–ø–∏–ª–∞—Å—å! –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ç—Ä–∞–≤–º—É –∏ —Ö–æ—Ç–µ–ª –ø–æ–¥–∞—Ç—å –≤ —Å—É–¥, –Ω–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–ª–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.',
        reward: { type: 'tokens', amount: 25 }
      },
      { 
        text: '–í–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∑–∞—â–∏—Ç—É',
        outcome: '–≠–º–º–∞ —Å—ç–∫–æ–Ω–æ–º–∏–ª–∞, –Ω–æ —Ä–∏—Å–∫–Ω—É–ª–∞. –ö —Å—á–∞—Å—Ç—å—é, —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç—Ä–∞–≤–º –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –æ–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏–ª–∞—Å—å –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—É–¥–µ–±–Ω—ã—Ö –∏—Å–∫–∞—Ö.',
        reward: { type: 'tokens', amount: 10 }
      },
    ],
    building: 'sportcenter',
    policy: 'sport-premium',
    lifehack: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å—É–¥–µ–±–Ω—ã—Ö –∏—Å–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.'
  },
  {
    id: 4,
    title: '–ù–µ–±–µ—Å–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
    panels: [
      {
        image: '‚úàÔ∏è',
        text: '–≠–Ω–µ—Ä–≥–æ–ì–æ—Ä–æ–¥ —Å—Ç–∞–ª –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–º, —á—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç. "–¢–µ–ø–µ—Ä—å –º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–æ –≤—Å–µ–º –º–∏—Ä–æ–º", - —Ä–∞–¥–æ–≤–∞–ª–∞—Å—å –≠–º–º–∞.',
      },
      {
        image: 'üß≥',
        text: '–ü–ª–∞–Ω–∏—Ä—É—è –ø–µ—Ä–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≠–º–º–∞ –≤—Å–ø–æ–º–Ω–∏–ª–∞ –æ –¥—Ä—É–≥–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–µ—Ä—è–ª –±–∞–≥–∞–∂ –≤ –ø–æ–µ–∑–¥–∫–µ. "–°—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π".',
      },
      {
        image: '‚õàÔ∏è',
        text: '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞ –±—ã–ª –Ω–µ—É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–º. "–†–µ–π—Å –º–æ–≥—É—Ç –∑–∞–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –¥–∞–∂–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑-–∑–∞ —à—Ç–æ—Ä–º–∞", - –±–µ—Å–ø–æ–∫–æ–∏–ª–∞—Å—å –æ–Ω–∞.',
      },
      {
        image: 'üìä',
        text: '–≠–º–º–∞ —Å—Ä–∞–≤–Ω–∏–ª–∞ –±–∞–∑–æ–≤—É—é –∏ –ø—Ä–µ–º–∏—É–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è –ø–æ–∫—Ä—ã–≤–∞–ª–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–¥–µ—Ä–∂–∫–∏, –Ω–æ –∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–π—Å–æ–≤, –ø–æ—Ç–µ—Ä—é –±–∞–≥–∞–∂–∞ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã.',
      }
    ],
    choices: [
      { 
        text: '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É',
        outcome: '–ò–Ω—Ç—É–∏—Ü–∏—è –Ω–µ –ø–æ–¥–≤–µ–ª–∞! –†–µ–π—Å –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑-–∑–∞ —à—Ç–æ—Ä–º–∞, –Ω–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–º–µ—Å—Ç–∏–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –∏ –æ–ø–ª–∞—Ç–∏–ª–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ.',
        reward: { type: 'tokens', amount: 30 }
      },
      { 
        text: '–í–∑—è—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É',
        outcome: '–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–∫—Ä—ã–ª–∞ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç, –Ω–æ –≠–º–º–∞ –ø–æ—Ç–µ—Ä—è–ª–∞ –≤—Ä–µ–º—è –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–Ω–∞ —Ä–µ—à–∏–ª–∞ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–µ.',
        reward: { type: 'tokens', amount: 15 }
      },
    ],
    building: 'airport',
    policy: 'travel-premium',
    lifehack: '–•–æ—Ä–æ—à–∞—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã, –Ω–æ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –ø–æ—Ç–µ—Ä—é –±–∞–≥–∞–∂–∞ –∏ –¥–∞–∂–µ –æ—Ç–º–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º!'
  }
];

// Styled Components
const StoryContainer = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background: #2b1a27;
  color: white;
  max-width: 100%;
  overflow-x: hidden;
  padding-bottom: 80px;
`;

const StoryHeader = styled.div`
  padding: var(--spacing-lg) var(--spacing-md);
  text-align: center;
  background-color: rgba(0, 0, 0, 0.3);
`;

const ChapterTitle = styled.h1`
  font-size: 1.8rem;
  margin-bottom: var(--spacing-sm);
  color: white;
`;

const ComicStrip = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  margin: var(--spacing-lg) 0;
`;

const ComicPanel = styled(motion.div)`
  background: white;
  border-radius: var(--border-radius-md);
  margin: 0 var(--spacing-lg);
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
`;

const PanelImage = styled.div`
  background: #f5f5f5;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8rem;
`;

const PanelText = styled.div`
  color: var(--color-text);
  padding: var(--spacing-md);
  font-size: 1rem;
  line-height: 1.5;
`;

const ChoiceContainer = styled.div`
  padding: var(--spacing-lg) var(--spacing-md);
  text-align: center;
`;

const ChoiceTitle = styled.h2`
  margin-bottom: var(--spacing-lg);
`;

const ChoiceButtons = styled.div`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
`;

const ChoiceButton = styled(motion.button)`
  padding: var(--spacing-md);
  background: ${props => props.primary ? 'var(--color-primary)' : 'transparent'};
  color: ${props => props.primary ? 'white' : 'white'};
  border: 2px solid ${props => props.primary ? 'var(--color-primary)' : 'white'};
  border-radius: var(--border-radius-md);
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
`;

const OutcomeContainer = styled(motion.div)`
  background: rgba(0, 0, 0, 0.8);
  border-radius: var(--border-radius-lg);
  padding: var(--spacing-lg);
  margin: var(--spacing-lg) var(--spacing-md);
`;

const OutcomeText = styled.p`
  font-size: 1.1rem;
  line-height: 1.6;
  margin-bottom: var(--spacing-lg);
`;

const RewardBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-md);
  background: rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
  margin-bottom: var(--spacing-md);
`;

const RewardIcon = styled.span`
  font-size: 2rem;
`;

const LifehackContainer = styled(motion.div)`
  background: rgba(142, 29, 65, 0.3);
  border-left: 4px solid var(--color-primary);
  padding: var(--spacing-md);
  margin: var(--spacing-lg) var(--spacing-md);
`;

const LifehackTitle = styled.h3`
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  margin-bottom: var(--spacing-sm);
  color: var(--color-primary-light);
`;

const LifehackText = styled.p`
  line-height: 1.5;
  font-size: 0.95rem;
`;

const ContinueButton = styled(motion.button)`
  padding: var(--spacing-md) var(--spacing-xl);
  background: white;
  color: var(--color-primary);
  border: none;
  border-radius: var(--border-radius-md);
  font-weight: 600;
  margin-top: var(--spacing-lg);
  cursor: pointer;
  align-self: center;
`;

const BackButton = styled(motion.button)`
  position: absolute;
  top: var(--spacing-md);
  left: var(--spacing-md);
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
  cursor: pointer;
  z-index: 10;
`;

const NavigationButton = styled(motion.button)`
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(5px);
  cursor: pointer;
  z-index: 10;
  left: ${props => props.direction === 'prev' ? 'var(--spacing-md)' : 'auto'};
  right: ${props => props.direction === 'next' ? 'var(--spacing-md)' : 'auto'};
`;

const Progress = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: ${props => props.percentage}%;
  height: 4px;
  background: var(--color-primary);
  z-index: 20;
  transition: width 0.3s ease;
`;

const StoryChapter = ({ userData, updateUserData }) => {
  const { chapter } = useParams();
  const navigate = useNavigate();
  
  const [currentChapter, setCurrentChapter] = useState(null);
  const [currentPanelIndex, setCurrentPanelIndex] = useState(0);
  const [showChoices, setShowChoices] = useState(false);
  const [selectedChoice, setSelectedChoice] = useState(null);
  const [showOutcome, setShowOutcome] = useState(false);
  const [showLifehack, setShowLifehack] = useState(false);
  
  useEffect(() => {
    // Find the chapter data
    const chapterData = storyChapters.find(c => c.id === parseInt(chapter, 10));
    
    if (chapterData) {
      setCurrentChapter(chapterData);
    } else {
      // If chapter not found, redirect to the first chapter
      navigate('/story/1');
    }
  }, [chapter, navigate]);
  
  const handleNextPanel = () => {
    if (currentPanelIndex < currentChapter.panels.length - 1) {
      setCurrentPanelIndex(prevIndex => prevIndex + 1);
    } else {
      // Show choices when all panels are viewed
      setShowChoices(true);
    }
  };
  
  const handlePrevPanel = () => {
    if (currentPanelIndex > 0) {
      setCurrentPanelIndex(prevIndex => prevIndex - 1);
    }
  };
  
  const handleSelectChoice = (choice, index) => {
    setSelectedChoice(choice);
    setShowChoices(false);
    setShowOutcome(true);
    
    // Apply rewards
    if (choice.reward) {
      if (choice.reward.type === 'tokens') {
        updateUserData({
          tokens: userData.tokens + choice.reward.amount
        });
      }
      // Add more reward types here as needed
    }
  };
  
  const handleContinueAfterOutcome = () => {
    setShowOutcome(false);
    setShowLifehack(true);
    
    // Mark chapter as completed in user data
    const completedChapters = userData.story?.completedChapters || [];
    if (!completedChapters.includes(parseInt(chapter, 10))) {
      updateUserData({
        story: {
          ...userData.story,
          completedChapters: [...completedChapters, parseInt(chapter, 10)],
          currentChapter: parseInt(chapter, 10) + 1
        }
      });
    }
  };
  
  const handleFinishChapter = () => {
    // Navigate to the next chapter or back to the city
    if (parseInt(chapter, 10) < storyChapters.length) {
      navigate(`/story/${parseInt(chapter, 10) + 1}`);
    } else {
      navigate('/city');
    }
  };
  
  if (!currentChapter) {
    return null; // Loading or chapter not found
  }
  
  // Calculate progress percentage
  const totalProgress = currentChapter.panels.length + 2; // panels + choices + outcome
  let currentProgress = currentPanelIndex + 1;
  
  if (showChoices) currentProgress = currentChapter.panels.length + 1;
  if (showOutcome) currentProgress = currentChapter.panels.length + 2;
  if (showLifehack) currentProgress = totalProgress;
  
  const progressPercentage = (currentProgress / totalProgress) * 100;
  
  return (
    <StoryContainer>
      <Progress percentage={progressPercentage} />
      
      <BackButton
        onClick={() => navigate('/city')}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        √ó
      </BackButton>
      
      <StoryHeader>
        <ChapterTitle>–ì–ª–∞–≤–∞ {chapter}: {currentChapter.title}</ChapterTitle>
      </StoryHeader>
      
      <AnimatePresence mode="wait">
        {!showChoices && !showOutcome && !showLifehack && (
          <ComicStrip
            key="comic"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <ComicPanel
              key={`panel-${currentPanelIndex}`}
              initial={{ x: 100, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: -100, opacity: 0 }}
              transition={{ type: "spring", stiffness: 300, damping: 30 }}
            >
              <PanelImage>
                {currentChapter.panels[currentPanelIndex].image}
              </PanelImage>
              <PanelText>
                {currentChapter.panels[currentPanelIndex].text}
              </PanelText>
            </ComicPanel>
            
            <div style={{ display: 'flex', justifyContent: 'center', marginTop: 'var(--spacing-md)' }}>
              {currentPanelIndex > 0 && (
                <NavigationButton
                  direction="prev"
                  onClick={handlePrevPanel}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  ‚Üê
                </NavigationButton>
              )}
              
              <NavigationButton
                direction="next"
                onClick={handleNextPanel}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                ‚Üí
              </NavigationButton>
            </div>
          </ComicStrip>
        )}
        
        {showChoices && (
          <ChoiceContainer
            key="choices"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -50 }}
            transition={{ duration: 0.3 }}
          >
            <ChoiceTitle>–ß—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≥–µ—Ä–æ–∏–Ω—è?</ChoiceTitle>
            
            <ChoiceButtons>
              {currentChapter.choices.map((choice, index) => (
                <ChoiceButton
                  key={index}
                  primary={index === 0}
                  onClick={() => handleSelectChoice(choice, index)}
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  {choice.text}
                </ChoiceButton>
              ))}
            </ChoiceButtons>
          </ChoiceContainer>
        )}
        
        {showOutcome && (
          <OutcomeContainer
            key="outcome"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ duration: 0.3 }}
          >
            <OutcomeText>{selectedChoice.outcome}</OutcomeText>
            
            {selectedChoice.reward && (
              <RewardBox>
                <RewardIcon>
                  {selectedChoice.reward.type === 'tokens' ? 'üíé' : '‚≠ê'}
                </RewardIcon>
                <div>
                  <strong>–ù–∞–≥—Ä–∞–¥–∞</strong>
                  <div>
                    {selectedChoice.reward.type === 'tokens' 
                      ? `+${selectedChoice.reward.amount} —Ç–æ–∫–µ–Ω–æ–≤` 
                      : selectedChoice.reward.description}
                  </div>
                </div>
              </RewardBox>
            )}
            
            <div style={{ textAlign: 'center' }}>
              <ContinueButton
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleContinueAfterOutcome}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </ContinueButton>
            </div>
          </OutcomeContainer>
        )}
        
        {showLifehack && (
          <LifehackContainer
            key="lifehack"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -30 }}
            transition={{ duration: 0.3 }}
          >
            <LifehackTitle>
              <span>üí°</span> –°–æ–≤–µ—Ç –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            </LifehackTitle>
            
            <LifehackText>
              {currentChapter.lifehack}
            </LifehackText>
            
            <div style={{ textAlign: 'center', marginTop: 'var(--spacing-lg)' }}>
              <ContinueButton
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleFinishChapter}
              >
                {parseInt(chapter, 10) < storyChapters.length 
                  ? '–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞' 
                  : '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥'}
              </ContinueButton>
            </div>
          </LifehackContainer>
        )}
      </AnimatePresence>
    </StoryContainer>
  );
};

export default StoryChapter;
